<pre><code class="language-ruby">module ActionMailer
  # Provides helper methods for ActionMailer::Base that can be used for easily
  # formatting messages, accessing mailer or message instances, and the
  # attachments list.
  module MailHelper
    # Take the text and format it, indented two spaces for each line, and
    # wrapped at 72 columns:
    #
    #   text = &lt;&lt;-TEXT
    #     This is
    #     the      paragraph.
    #
    #     * item1 * item2
    #   TEXT
    #
    #   block_format text
    #   # =&gt; &quot;  This is the paragraph.\n\n  * item1\n  * item2\n&quot;
    def block_format(text)
      formatted = text.split(/\n\r?\n/).collect { |paragraph|
        format_paragraph(paragraph)
      }.join(&quot;\n\n&quot;)

      # Make list points stand on their own line
      formatted.gsub!(/[ ]*([*]+) ([^*]*)/) { &quot;  #{$1} #{$2.strip}\n&quot; }
      formatted.gsub!(/[ ]*([#]+) ([^#]*)/) { &quot;  #{$1} #{$2.strip}\n&quot; }

      formatted
    end

    # Access the mailer instance.
    def mailer
      @_controller
    end

    # Access the message instance.
    def message
      @_message
    end

    # Access the message attachments list.
    def attachments
      mailer.attachments
    end

    # Returns +text+ wrapped at +len+ columns and indented +indent+ spaces.
    # By default column length +len+ equals 72 characters and indent
    # +indent+ equal two spaces.
    #
    #   my_text = 'Here is a sample text with more than 40 characters'
    #
    #   format_paragraph(my_text, 25, 4)
    #   # =&gt; &quot;    Here is a sample text with\n    more than 40 characters&quot;
    def format_paragraph(text, len = 72, indent = 2)
      sentences = [[]]

      text.split.each do |word|
        if sentences.first.present? &amp;&amp; (sentences.last + [word]).join(' ').length &gt; len
          sentences &lt;&lt; [word]
        else
          sentences.last &lt;&lt; word
        end
      end

      indentation = &quot; &quot; * indent
      sentences.map! { |sentence|
        &quot;#{indentation}#{sentence.join(' ')}&quot;
      }.join &quot;\n&quot;
    end
  end
end</code></pre>