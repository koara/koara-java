<?xml version="1.0" encoding="UTF-8"?>
<document>
  <codeblock language="perl">
package Mojo::IOLoop::Client;
use Mojo::Base 'Mojo::EventEmitter';

use Errno 'EINPROGRESS';
use IO::Socket::IP;
use Mojo::IOLoop;
use Scalar::Util 'weaken';
use Socket qw(IPPROTO_TCP SOCK_STREAM TCP_NODELAY);

# Non-blocking name resolution requires Net::DNS::Native
use constant NDN =&gt; $ENV{MOJO_NO_NDN}
  ? 0
  : eval 'use Net::DNS::Native 0.15 (); 1';
my $NDN = NDN ? Net::DNS::Native-&gt;new(pool =&gt; 5, extra_thread =&gt; 1) : undef;

# TLS support requires IO::Socket::SSL
use constant TLS =&gt; $ENV{MOJO_NO_TLS}
  ? 0
  : eval 'use IO::Socket::SSL 1.94 (); 1';
use constant TLS_READ  =&gt; TLS ? IO::Socket::SSL::SSL_WANT_READ()  : 0;
use constant TLS_WRITE =&gt; TLS ? IO::Socket::SSL::SSL_WANT_WRITE() : 0;

# SOCKS support requires IO::Socket::Socks
use constant SOCKS =&gt; $ENV{MOJO_NO_SOCKS}
  ? 0
  : eval 'use IO::Socket::Socks 0.64 (); 1';
use constant SOCKS_READ  =&gt; SOCKS ? IO::Socket::Socks::SOCKS_WANT_READ()  : 0;
use constant SOCKS_WRITE =&gt; SOCKS ? IO::Socket::Socks::SOCKS_WANT_WRITE() : 0;

has reactor =&gt; sub { Mojo::IOLoop-&gt;singleton-&gt;reactor };

sub DESTROY { shift-&gt;_cleanup }

sub connect {
  my ($self, $args) = (shift, ref $_[0] ? $_[0] : {@_});

  # Timeout
  weaken $self;
  my $reactor = $self-&gt;reactor;
  $self-&gt;{timer} = $reactor-&gt;timer($args-&gt;{timeout} || 10,
    sub { $self-&gt;emit(error =&gt; 'Connect timeout') });

  # Blocking name resolution
  $_ &amp;&amp; s/[[\]]//g for @$args{qw(address socks_address)};
  my $address = $args-&gt;{socks_address} || ($args-&gt;{address} ||= '127.0.0.1');
  return $reactor-&gt;next_tick(sub { $self &amp;&amp; $self-&gt;_connect($args) })
    if !NDN || $args-&gt;{handle};

  # Non-blocking name resolution
  my $handle = $self-&gt;{dns} = $NDN-&gt;getaddrinfo($address, _port($args),
    {protocol =&gt; IPPROTO_TCP, socktype =&gt; SOCK_STREAM});
  $reactor-&gt;io(
    $handle =&gt; sub {
      my $reactor = shift;

      $reactor-&gt;remove($self-&gt;{dns});
      my ($err, @res) = $NDN-&gt;get_result(delete $self-&gt;{dns});
      return $self-&gt;emit(error =&gt; &quot;Can't resolve: $err&quot;) if $err;

      $args-&gt;{addr_info} = \@res;
      $self-&gt;_connect($args);
    }
  )-&gt;watch($handle, 1, 0);
}

sub _cleanup {
  my $self = shift;
  $NDN-&gt;timedout($self-&gt;{dns}) if $self-&gt;{dns};
  my $reactor = $self-&gt;reactor;
  $self-&gt;{$_} &amp;&amp; $reactor-&gt;remove(delete $self-&gt;{$_}) for qw(dns timer handle);
  return $self;
}

sub _connect {
  my ($self, $args) = @_;

  my $handle;
  my $address = $args-&gt;{socks_address} || $args-&gt;{address};
  unless ($handle = $self-&gt;{handle} = $args-&gt;{handle}) {
    my %options = (PeerAddr =&gt; $address, PeerPort =&gt; _port($args));
    %options = (PeerAddrInfo =&gt; $args-&gt;{addr_info}) if $args-&gt;{addr_info};
    $options{Blocking} = 0;
    $options{LocalAddr} = $args-&gt;{local_address} if $args-&gt;{local_address};
    return $self-&gt;emit(error =&gt; &quot;Can't connect: $@&quot;)
      unless $self-&gt;{handle} = $handle = IO::Socket::IP-&gt;new(%options);
  }
  $handle-&gt;blocking(0);

  # Wait for handle to become writable
  weaken $self;
  $self-&gt;reactor-&gt;io($handle =&gt; sub { $self-&gt;_ready($args) })
    -&gt;watch($handle, 0, 1);
}

sub _port { $_[0]{socks_port} || $_[0]{port} || ($_[0]{tls} ? 443 : 80) }

sub _ready {
  my ($self, $args) = @_;

  # Retry or handle exceptions
  my $handle = $self-&gt;{handle};
  return $! == EINPROGRESS ? undef : $self-&gt;emit(error =&gt; $!)
    if $handle-&gt;isa('IO::Socket::IP') &amp;&amp; !$handle-&gt;connect;
  return $self-&gt;emit(error =&gt; $! || 'Not connected') unless $handle-&gt;connected;

  # Disable Nagle's algorithm
  setsockopt $handle, IPPROTO_TCP, TCP_NODELAY, 1;

  $self-&gt;_try_socks($args);
}

sub _socks {
  my ($self, $args) = @_;

  # Connected
  my $handle = $self-&gt;{handle};
  return $self-&gt;_try_tls($args) if $handle-&gt;ready;

  # Switch between reading and writing
  my $err = $IO::Socket::Socks::SOCKS_ERROR;
  if    ($err == SOCKS_READ)  { $self-&gt;reactor-&gt;watch($handle, 1, 0) }
  elsif ($err == SOCKS_WRITE) { $self-&gt;reactor-&gt;watch($handle, 1, 1) }
  else                        { $self-&gt;emit(error =&gt; $err) }
}

sub _tls {
  my $self = shift;

  # Connected
  my $handle = $self-&gt;{handle};
  return $self-&gt;_cleanup-&gt;emit(connect =&gt; $handle) if $handle-&gt;connect_SSL;

  # Switch between reading and writing
  my $err = $IO::Socket::SSL::SSL_ERROR;
  if    ($err == TLS_READ)  { $self-&gt;reactor-&gt;watch($handle, 1, 0) }
  elsif ($err == TLS_WRITE) { $self-&gt;reactor-&gt;watch($handle, 1, 1) }
}

sub _try_socks {
  my ($self, $args) = @_;

  my $handle = $self-&gt;{handle};
  return $self-&gt;_try_tls($args) unless $args-&gt;{socks_address};
  return $self-&gt;emit(
    error =&gt; 'IO::Socket::Socks 0.64+ required for SOCKS support')
    unless SOCKS;

  my %options
    = (ConnectAddr =&gt; $args-&gt;{address}, ConnectPort =&gt; $args-&gt;{port});
  @options{qw(AuthType Username Password)}
    = ('userpass', @$args{qw(socks_user socks_pass)})
    if $args-&gt;{socks_user};
  my $reactor = $self-&gt;reactor;
  $reactor-&gt;remove($handle);
  return $self-&gt;emit(error =&gt; 'SOCKS upgrade failed')
    unless IO::Socket::Socks-&gt;start_SOCKS($handle, %options);
  weaken $self;
  $reactor-&gt;io($handle =&gt; sub { $self-&gt;_socks($args) })-&gt;watch($handle, 0, 1);
}

sub _try_tls {
  my ($self, $args) = @_;

  my $handle = $self-&gt;{handle};
  return $self-&gt;_cleanup-&gt;emit(connect =&gt; $handle) unless $args-&gt;{tls};
  return $self-&gt;emit(error =&gt; 'IO::Socket::SSL 1.94+ required for TLS support')
    unless TLS;

  # Upgrade
  weaken $self;
  my %options = (
    SSL_ca_file =&gt; $args-&gt;{tls_ca}
      &amp;&amp; -T $args-&gt;{tls_ca} ? $args-&gt;{tls_ca} : undef,
    SSL_cert_file  =&gt; $args-&gt;{tls_cert},
    SSL_error_trap =&gt; sub { $self-&gt;emit(error =&gt; $_[1]) },
    SSL_hostname   =&gt; IO::Socket::SSL-&gt;can_client_sni ? $args-&gt;{address} : '',
    SSL_key_file   =&gt; $args-&gt;{tls_key},
    SSL_startHandshake  =&gt; 0,
    SSL_verify_mode     =&gt; $args-&gt;{tls_ca} ? 0x01 : 0x00,
    SSL_verifycn_name   =&gt; $args-&gt;{address},
    SSL_verifycn_scheme =&gt; $args-&gt;{tls_ca} ? 'http' : undef
  );
  my $reactor = $self-&gt;reactor;
  $reactor-&gt;remove($handle);
  return $self-&gt;emit(error =&gt; 'TLS upgrade failed')
    unless IO::Socket::SSL-&gt;start_SSL($handle, %options);
  $reactor-&gt;io($handle =&gt; sub { $self-&gt;_tls })-&gt;watch($handle, 0, 1);
}

1;

=encoding utf8

=head1 NAME

Mojo::IOLoop::Client - Non-blocking TCP client

=head1 SYNOPSIS

  use Mojo::IOLoop::Client;

  # Create socket connection
  my $client = Mojo::IOLoop::Client-&gt;new;
  $client-&gt;on(connect =&gt; sub {
    my ($client, $handle) = @_;
    ...
  });
  $client-&gt;on(error =&gt; sub {
    my ($client, $err) = @_;
    ...
  });
  $client-&gt;connect(address =&gt; 'example.com', port =&gt; 80);

  # Start reactor if necessary
  $client-&gt;reactor-&gt;start unless $client-&gt;reactor-&gt;is_running;

=head1 DESCRIPTION

L&lt;Mojo::IOLoop::Client&gt; opens TCP connections for L&lt;Mojo::IOLoop&gt;.

=head1 EVENTS

L&lt;Mojo::IOLoop::Client&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.

=head2 connect

  $client-&gt;on(connect =&gt; sub {
    my ($client, $handle) = @_;
    ...
  });

Emitted once the connection is established.

=head2 error

  $client-&gt;on(error =&gt; sub {
    my ($client, $err) = @_;
    ...
  });

Emitted if an error occurs on the connection, fatal if unhandled.

=head1 ATTRIBUTES

L&lt;Mojo::IOLoop::Client&gt; implements the following attributes.

=head2 reactor

  my $reactor = $client-&gt;reactor;
  $client     = $client-&gt;reactor(Mojo::Reactor::Poll-&gt;new);

Low-level event reactor, defaults to the C&lt;reactor&gt; attribute value of the
global L&lt;Mojo::IOLoop&gt; singleton.

=head1 METHODS

L&lt;Mojo::IOLoop::Client&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.

=head2 connect

  $client-&gt;connect(address =&gt; '127.0.0.1', port =&gt; 3000);

Open a socket connection to a remote host. Note that non-blocking name
resolution depends on L&lt;Net::DNS::Native&gt; (0.15+), SOCKS5 support on
L&lt;IO::Socket::Socks&gt; (0.64), and TLS support on L&lt;IO::Socket::SSL&gt; (1.94+).

These options are currently available:

=over 2

=item address

  address =&gt; 'mojolicio.us'

Address or host name of the peer to connect to, defaults to C&lt;127.0.0.1&gt;.

=item handle

  handle =&gt; $handle

Use an already prepared handle.

=item local_address

  local_address =&gt; '127.0.0.1'

Local address to bind to.

=item port

  port =&gt; 80

Port to connect to, defaults to C&lt;80&gt; or C&lt;443&gt; with C&lt;tls&gt; option.

=item socks_address

  socks_address =&gt; '127.0.0.1'

Address or host name of SOCKS5 proxy server to use for connection.

=item socks_pass

  socks_pass =&gt; 'secr3t'

Password to use for SOCKS5 authentication.

=item socks_port

  socks_port =&gt; 9050

Port of SOCKS5 proxy server to use for connection.

=item socks_user

  socks_user =&gt; 'sri'

Username to use for SOCKS5 authentication.

=item timeout

  timeout =&gt; 15

Maximum amount of time in seconds establishing connection may take before
getting canceled, defaults to C&lt;10&gt;.

=item tls

  tls =&gt; 1

Enable TLS.

=item tls_ca

  tls_ca =&gt; '/etc/tls/ca.crt'

Path to TLS certificate authority file. Also activates hostname verification.

=item tls_cert

  tls_cert =&gt; '/etc/tls/client.crt'

Path to the TLS certificate file.

=item tls_key

  tls_key =&gt; '/etc/tls/client.key'

Path to the TLS key file.

=back

=head1 SEE ALSO

L&lt;Mojolicious&gt;, L&lt;Mojolicious::Guides&gt;, L&lt;http://mojolicio.us&gt;.

=cut  </codeblock>
</document>