options {  BUILD_NODE_FILES = true;  IGNORE_CASE=true;  MULTI = true;  NODE_DEFAULT_VOID = true;  STATIC = false;  UNICODE_INPUT = true;  VISITOR=true;}
PARSER_BEGIN(Koara)
package io.koara;
import java.util.Arrays;
public class Koara {    private int currentBlockLevel = 0;    private int currentQuoteLevel = 0;    private boolean blockAhead() {      if(getToken(1).kind == EOL) {        Token t;        int i = 2;        int eol = 0;                int quoteLevel;                do {                    quoteLevel = 0;                do {               t = getToken(i++);                   if(t.kind == EOL && currentBlockLevel > 0 && ++eol > 2) { return false; }                   if(t.kind == GT) {                 	   if(t.beginColumn == 1 && currentBlockLevel > 0 && currentQuoteLevel == 0)  {                 		   return false;                	   }                	   quoteLevel++;                     }                } while (t.kind == GT || t.kind == SPACE || t.kind == TAB);                               if(quoteLevel > currentQuoteLevel) { return true; } //            if(quoteLevel < currentQuoteLevel) { return false; }        } while(t.kind == EOL);                        return (t.kind != EOF) && ((quoteLevel > 0 && quoteLevel ==  currentQuoteLevel) || (t.beginColumn > ((currentBlockLevel * 4) - 2)));      }      return false;    }    private boolean fencesAhead() {	    if(getToken(1).kind == EOL) {	      int i = skip(2, SPACE, TAB);	      if(getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK) {	    	 i = skip(i+3, SPACE, TAB);	         return getToken(i).kind == EOL || getToken(i).kind == EOF;	      }	    }	    return false;    }    private boolean headingAhead(int offset) {      if (getToken(offset).kind == EQ) {        int heading = 1;        for(int i=(offset + 1);;i++) {          if(getToken(i).kind != EQ) { return true; }          if(++heading > 6) { return false;}        }      }       return false;    }	private boolean listItemAhead(boolean ordered) {        if(getToken(1).kind == EOL) {          for(int i=2, eol=1;;i++) {          Token t = getToken(i);                    if(t.kind == EOL && ++eol > 2) {                  return false;          } else if(t.kind != SPACE && t.kind != TAB && t.kind != EOL){        	  if(currentQuoteLevel > 0) {return false;}              if(ordered) {	              return (t.kind == DIGITS && getToken(i+1).kind == DOT);	          }	          return (t.kind == DASH);          }      }        }    return false;  }    private boolean multilineAhead(Integer token) {      if(getToken(1).kind == token && getToken(2).kind != token && getToken(2).kind != EOL) {    	for(int i=2;;i++) {          Token t = getToken(i);          if(t.kind == token) {                        return true;          } else if(t.kind == EOL) {                          i = skip(i+1, SPACE, TAB);                          int quoteLevel = newQuoteLevel(i);                      if(quoteLevel == currentQuoteLevel) {                          i = skip(i, SPACE, TAB, GT);                          if(getToken(i).kind == token                        		  || getToken(i).kind == EOL                                  || getToken(i).kind == DASH                                  || (getToken(i).kind == DIGITS && getToken(i+1).kind == DOT)                                  || (getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK)                                  || headingAhead(i)) {                        	  return false;                          }                      } else {                    	  return false;                      }          } else if(t.kind == EOF) {            return false;          }        }      }      return false;    }    private boolean textAhead() {      int i = skip(1, SPACE, TAB);      if(getToken(i).kind == EOL && getToken(i+1).kind != EOL && getToken(i+1).kind != EOF) {        i = skip(i+1, SPACE, TAB);        int quoteLevel = newQuoteLevel(i);        if(quoteLevel == currentQuoteLevel) {            i = skip(i, SPACE, TAB, GT);            return getToken(i).kind != EOL        	    && getToken(i).kind != DASH            	&& !(getToken(i).kind == DIGITS && getToken(i+1).kind == DOT)            	&& !(getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK)        		&& !headingAhead(i);       }      }      return false;    }    private boolean nextAfterSpace(Integer... tokens) {      int i = skip(1, SPACE, TAB);      return Arrays.asList(tokens).contains(getToken(i).kind);    }    private int newQuoteLevel(int offset) {	  int quoteLevel = 0;	  for(int i=offset;;i++) {		  Token t = getToken(i);		  if(t.kind == GT) { 			  quoteLevel++;	      } else if(t.kind != SPACE && t.kind != TAB) { 	    	  return quoteLevel;	      }		 	  }    }    private int skip(int offset, Integer... tokens) {      for(int i=offset;;i++) {        Token t = getToken(i);        if(t.kind == EOF || !Arrays.asList(tokens).contains(t.kind)) { return i; }      }    }}
PARSER_END(Koara)

TOKEN : {    <ASTERISK : "*">  | <BACKSLASH: "\\">  | <BACKTICK: "`">  | <CHAR_SEQUENCE: (~["*", "\\", "`", ":", "-", "0" - "9", ".", "=", ">", "[", "(", "<", "]", ")", "_", " ", "\t", "\r", "\n"])+>  | <COLON : ":">  | <DASH: "-">  | <DIGITS : (["0"-"9"])+>  | <DOT: ".">  | <EOL : (" " | "\t")* ("\r"|"\n"|"\r\n")>  | <EQ: "=">  | <ESCAPED_CHAR : "\\" ["*", "\\", "`", ":", "-", "0" - "9", ".", "=", ">", "[", "(", "<", "]", ")", "_"] >  | <GT: ">">  | <IMAGE_LABEL : "image:" >  | <LBRACK: "[">  | <LPAREN: "(">  | <LT: "<">  | <RBRACK: "]">  | <RPAREN: ")">  | <SPACE: " ">  | <TAB: "\t">  | <UNDERSCORE: "_">}

ASTDocument Document() #Document : {} {  (LOOKAHEAD(1) <EOL>)*  WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead()}) (<EOL> WhiteSpace())+ BlockElement())* (<EOL>)* WhiteSpace() ] <EOF>  { return jjtThis; }}

void BlockElement() : {currentBlockLevel++;} { (     LOOKAHEAD({headingAhead(1)}) Heading()   | LOOKAHEAD(1) Blockquote()   | LOOKAHEAD(1) UnorderedList()   | LOOKAHEAD(2) OrderedList()   | LOOKAHEAD(FencedCodeBlock()) FencedCodeBlock()   | Paragraph() )  { currentBlockLevel--; }}void Heading() #Heading : {Token t; int heading=0;} {  (LOOKAHEAD(1) <EQ> {heading++;})+ WhiteSpace()  (    Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Strong()) Strong()    | LOOKAHEAD(Em()) Em()    | LOOKAHEAD(Code()) Code()    | LooseChar()  )*  { jjtThis.jjtSetValue(heading); }}void Blockquote() #Blockquote : { currentQuoteLevel++; } {  <GT> (LOOKAHEAD(BlockquoteEmptyLine() ) BlockquoteEmptyLine())* WhiteSpace()  [ BlockElement()    (LOOKAHEAD({blockAhead()}) (<EOL> WhiteSpace() BlockquotePrefix())+ BlockElement())*  ]  (LOOKAHEAD(BlockquoteEmptyLine() <EOL>) BlockquoteEmptyLine())*  { currentQuoteLevel--; }}void BlockquotePrefix() : {int i=0;} {  (LOOKAHEAD({++i < currentQuoteLevel}) <GT> WhiteSpace())+}void BlockquoteEmptyLine() : {} {  <EOL> WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())+ }void UnorderedList() #List : {} {  UnorderedListItem() (LOOKAHEAD({listItemAhead(false)}) (<EOL>)+ WhiteSpace() UnorderedListItem())*}void UnorderedListItem() #ListItem : {} {  <DASH> WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead()}) (<EOL> WhiteSpace() [ LOOKAHEAD({currentQuoteLevel > 0}) BlockquotePrefix() ] )+ BlockElement())* ]}void OrderedList() #List : {} {  OrderedListItem() (LOOKAHEAD({listItemAhead(true)}) (<EOL>)+ WhiteSpace() OrderedListItem())*  { jjtThis.setOrdered(true); }}void OrderedListItem() #ListItem : {Token t;} {  (t = <DIGITS>) <DOT> WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead()}) (<EOL> WhiteSpace() [ LOOKAHEAD({currentQuoteLevel > 0}) BlockquotePrefix() ] )+ BlockElement())* ]  { jjtThis.setNumber(Integer.valueOf(Integer.valueOf(t.image))); }}void FencedCodeBlock() #CodeBlock : {Token t; String language; StringBuilder s = new StringBuilder(); int beginColumn;} {  t = <BACKTICK> {beginColumn = t.beginColumn;} <BACKTICK> (LOOKAHEAD(1) <BACKTICK>)+ WhiteSpace()   [LOOKAHEAD(1) (language = CodeLanguage())  { jjtThis.setLanguage(language);} ]  (LOOKAHEAD({getToken(1).kind != EOF && !fencesAhead()}) <EOL> LevelWhiteSpace(beginColumn))?  (	    t = <ASTERISK> 								{ s.append(t.image); }	  | t = <BACKSLASH> 							{ s.append(t.image); }	  | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }	  | t = <COLON> 								{ s.append(t.image); }	  | t = <DASH> 									{ s.append(t.image); }	  | t = <DIGITS> 								{ s.append(t.image); }	  | t = <DOT> 									{ s.append(t.image); }	  | t = <EQ> 									{ s.append(t.image); }	  | t = <ESCAPED_CHAR> 							{ s.append(t.image); }	  | t = <IMAGE_LABEL> 							{ s.append(t.image); }	  | t = <LT>	 								{ s.append(t.image); }			  | t = <GT> 									{ s.append(t.image); }	  | t = <LBRACK> 								{ s.append(t.image); }	  | t = <RBRACK> 								{ s.append(t.image); }	  | t = <LPAREN> 								{ s.append(t.image); }	  | t = <RPAREN> 								{ s.append(t.image); }	  | t = <UNDERSCORE> 						    { s.append(t.image); }	  | t = <BACKTICK> 								{ s.append(t.image); }	  | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	  )	  | LOOKAHEAD({!fencesAhead()}) (t = <EOL> { s.append("\n"); } LevelWhiteSpace(beginColumn))  )*  [ LOOKAHEAD({ fencesAhead() }) <EOL> WhiteSpace() <BACKTICK> <BACKTICK> (LOOKAHEAD(1) <BACKTICK>)+ ]{ jjtThis.jjtSetValue(s.toString()); }}void LevelWhiteSpace(int threshold) : {Token t; int currentPos=1;} {  (LOOKAHEAD({(getToken(1).kind == SPACE || getToken(1).kind == TAB) && currentPos < (threshold - 1)}) (        t = <SPACE> { currentPos = t.beginColumn; }      | t = <TAB> { currentPos = t.beginColumn; }    )  )*  }String CodeLanguage() : {Token t; StringBuilder s = new StringBuilder();} {  (LOOKAHEAD(1) (      t = <CHAR_SEQUENCE>							{ s.append(t.image); }    | t = <BACKTICK>								{ s.append(t.image); }  )  )+  { return s.toString(); }}
void Paragraph() #Paragraph : {} {  Inline() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())* Inline())*}

void Inline() : {} {
  (
      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(ASTERISK)}) StrongMultiline()    | LOOKAHEAD({multilineAhead(UNDERSCORE)}) EmMultiline()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LooseChar()
  )+
}void Image() #Image : {String ref = "";} {  <LBRACK> WhiteSpace() <IMAGE_LABEL> WhiteSpace() (ResourceText() | LooseChar())+ WhiteSpace() <RBRACK> [ LOOKAHEAD(ResourceUrl()) (ref = ResourceUrl()) ]  { jjtThis.jjtSetValue(ref); }}void Link() #Link : {String ref = "";} {  <LBRACK> WhiteSpace() (LOOKAHEAD(Image()) (Image()) | LOOKAHEAD(Strong()) Strong() | LOOKAHEAD(Em()) Em() | LOOKAHEAD(Code()) Code() | ResourceText() | LooseChar())+ WhiteSpace() <RBRACK> [ LOOKAHEAD(ResourceUrl()) (ref = ResourceUrl()) ]  { jjtThis.jjtSetValue(ref); }}void ResourceText() #Text : {Token t; StringBuilder s = new StringBuilder();} {  (LOOKAHEAD(2) (      t = <BACKSLASH> 					{ s.append(t.image); }    | t = <COLON>						{ s.append(t.image); }    | t = <CHAR_SEQUENCE>				{ s.append(t.image); }    | t = <DASH>						{ s.append(t.image); }    | t = <DIGITS>						{ s.append(t.image); }    | t = <DOT>							{ s.append(t.image); }    | t = <EQ>							{ s.append(t.image); }    | t = <ESCAPED_CHAR> 				{ s.append(t.image.substring(1)); }	| t = <IMAGE_LABEL>					{ s.append(t.image); }	| t = <GT>							{ s.append(t.image); }    | t = <LPAREN>						{ s.append(t.image); }    | t = <LT>							{ s.append(t.image); }    | t = <RPAREN>						{ s.append(t.image); }    | LOOKAHEAD({!nextAfterSpace(RBRACK)})     	(   t = <SPACE> 			{ s.append(t.image); }    	  | t = <TAB> 				{ s.append("    "); }    	)  	)  )+  { jjtThis.jjtSetValue(s.toString()); }}String ResourceUrl() : {String ref = "";} {  <LPAREN> WhiteSpace() ref = ResourceUrlText() WhiteSpace() <RPAREN>  { return ref; }}String ResourceUrlText() : {Token t; StringBuilder s = new StringBuilder();} {  ( 		t = <ASTERISK> 								{ s.append(t.image); }      | t = <BACKSLASH> 							{ s.append(t.image); }      | t = <BACKTICK> 								{ s.append(t.image); }      | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }      | t = <COLON>									{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image); }      | t = <DIGITS> 								{ s.append(t.image); }      | t = <DOT> 									{ s.append(t.image); }      | t = <EQ>									{ s.append(t.image); }      | t = <ESCAPED_CHAR> 							{ s.append(t.image.substring(1)); }      | t = <IMAGE_LABEL>							{ s.append(t.image); }      | t = <GT>									{ s.append(t.image); }      | t = <LBRACK> 								{ s.append(t.image); }      | t = <LPAREN> 								{ s.append(t.image); }	  | t = <LT>									{ s.append(t.image); }      | t = <RBRACK> 								{ s.append(t.image); }      | t = <UNDERSCORE> 							{ s.append(t.image); }      | LOOKAHEAD({!nextAfterSpace(RPAREN)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	    )  )*  { return s.toString(); }}void StrongMultiline() #Strong : {} {  <ASTERISK> StrongMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() StrongMultilineContent())* <ASTERISK>}void StrongMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | LOOKAHEAD(EmWithinStrongMultiline()) EmWithinStrongMultiline()    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <UNDERSCORE>					{ jjtThis.jjtSetValue(t.image); } #Text  )+}void StrongWithinEmMultiline() #Strong : {} {  <ASTERISK> StrongWithinEmMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() StrongWithinEmMultilineContent())* <ASTERISK>}void StrongWithinEmMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text    | t = <UNDERSCORE>					{ jjtThis.jjtSetValue(t.image); } #Text  )+}void Strong() #Strong : {Token t;} {  <ASTERISK>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LOOKAHEAD(EmWithinStrong()) EmWithinStrong()    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text    | t = <UNDERSCORE>					{ jjtThis.jjtSetValue(t.image); } #Text  )+  <ASTERISK>}void StrongWithinEm() #Strong : {Token t;} {  <ASTERISK>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text    | t = <UNDERSCORE>					{ jjtThis.jjtSetValue(t.image); } #Text  )+  <ASTERISK>}void EmMultiline() #Em : {} {    <UNDERSCORE> EmMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() EmMultilineContent())* <UNDERSCORE>}void EmMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LOOKAHEAD(StrongWithinEmMultiline()) StrongWithinEmMultiline()    | t = <ASTERISK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text  )+}void EmWithinStrongMultiline() #Em : {} {    <UNDERSCORE> EmWithinStrongMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() EmWithinStrongMultilineContent())* <UNDERSCORE>}void EmWithinStrongMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <ASTERISK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text  )+}void Em() #Em : {Token t;} {  <UNDERSCORE>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | LOOKAHEAD(StrongWithinEm()) StrongWithinEm()    | t = <ASTERISK>  					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text  )+  <UNDERSCORE>}void EmWithinStrong() #Em : {Token t;} {  <UNDERSCORE>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <ASTERISK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <BACKTICK>					{ jjtThis.jjtSetValue(t.image); } #Text    | t = <LBRACK>						{ jjtThis.jjtSetValue(t.image); } #Text  )+  <UNDERSCORE>}void CodeMultiline() #Code: {} {	<BACKTICK> CodeText() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())* CodeText())* <BACKTICK>}void Code() #Code: {} {    <BACKTICK> CodeText() <BACKTICK>}void CodeText() #Text : {Token t; StringBuffer s = new StringBuffer();} {    (	    t = <ASTERISK> 								{ s.append(t.image); }	  | t = <BACKSLASH> 							{ s.append(t.image); }      | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }      | t = <COLON> 								{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image); }      | t = <DIGITS> 								{ s.append(t.image); }      | t = <DOT> 									{ s.append(t.image); }      | t = <EQ> 									{ s.append(t.image); }      | t = <ESCAPED_CHAR> 							{ s.append(t.image); }      | t = <IMAGE_LABEL> 							{ s.append(t.image); }      | t = <LT> 									{ s.append(t.image); }	  | t = <LBRACK> 								{ s.append(t.image); }      | t = <RBRACK> 								{ s.append(t.image); }      | t = <LPAREN> 								{ s.append(t.image); }      | t = <GT> 									{ s.append(t.image); }      | t = <RPAREN> 								{ s.append(t.image); }      | t = <UNDERSCORE> 						    { s.append(t.image); }      | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	  )    )+    { jjtThis.jjtSetValue(s.toString()); }}

void Text() #Text : {Token t; StringBuffer s = new StringBuffer();} {
  (LOOKAHEAD(1) (   		t = <BACKSLASH>								{ s.append(t.image);}
      | t = <CHAR_SEQUENCE> 						{ s.append(t.image);}      | t = <COLON>									{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image);}      | t = <DIGITS> 								{ s.append(t.image);}      | t = <DOT>									{ s.append(t.image);}      | t = <EQ>									{ s.append(t.image);}      | t = <ESCAPED_CHAR> 							{ s.append(t.image.substring(1)); }      | t = <GT>									{ s.append(t.image);}      | t = <IMAGE_LABEL> 							{ s.append(t.image); }      | t = <LPAREN>								{ s.append(t.image);}      | t = <LT>									{ s.append(t.image);}      | t = <RBRACK>								{ s.append(t.image);}      | t = <RPAREN>								{ s.append(t.image);}      | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (				t = <SPACE> 						{ s.append(t.image); }		  	  | t = <TAB> 							{ s.append("    "); }	  )
    )  )+
  { jjtThis.jjtSetValue(s.toString()); }
}void LooseChar() #Text : {Token t;} {  (      t = <ASTERISK>    | t = <BACKTICK>    | t = <LBRACK>    | t = <UNDERSCORE>  )  { jjtThis.jjtSetValue(t.image); } 	}void LineBreak() #LineBreak : {} {  (<SPACE> | <TAB>)* <EOL>}void WhiteSpace() : {} {  (LOOKAHEAD (1) (<SPACE> | <TAB>))*}